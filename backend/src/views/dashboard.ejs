<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Tourist Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .route-visualization {
      position: relative;
    }

    .location-point {
      display: flex;
      flex-direction: column;
      align-items: center;
      flex: 0 0 auto;
    }

    .circle {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: inline-block;
    }

    .route-line {
      position: relative;
      display: flex;
      align-items: center;
    }

    .dashed-line {
      border-top: 2px dashed #dee2e6;
      width: 100%;
    }

    .route-line i {
      position: absolute;
      right: 0;
      background: white;
      padding: 0 5px;
    }

    .list-group {
      z-index: 1060;
      max-height: 200px;
      overflow-y: auto;
    }

    #notes:focus {
      border-color: #4361ee;
      box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
    }
  </style>
</head>

<body class="bg-white p-8 font-sans text-gray-800">
  <div class="absolute top-4 w-full max-w-2xl px-4 z-99">
    <% if (success && success.length> 0) { %>
      <div class="bg-green-500 text-white px-4 py-2 rounded mb-2">
        <%= success %>
      </div>
      <% } %>

        <% if (error && error.length> 0) { %>
          <div class="bg-red-500 text-white px-4 py-2 rounded mb-2">
            <%= error %>
          </div>
          <% } %>
  </div>

  <div class="sticky top-0 z-50 h-[5vh]">
    <%- include('partials/navbar', { user: user }) %>
  </div>
  <div class="pt-20 max-w-7xl mx-auto">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-2xl font-bold mb-1">Tourist Dashboard</h1>
      <p class="text-gray-500">Welcome back, <span class="font-semibold">
          <%= user.name %>
        </span></p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
      <!-- Left Column -->
      <div class="md:col-span-8 space-y-6">
        <!-- My Digital ID -->
        <div class="border border-gray-200 rounded-lg p-5">
          <div class="flex items-center text-gray-700 mb-2">
            <svg class="w-5 h-5 text-blue-500 mr-2" fill="none" stroke="currentColor" stroke-width="2"
              viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round"
                d="M12 11c.634 0 1.263-.21 1.754-.604l3.26 3.882a1 1 0 001.491-1.32l-3.261-3.882a2.387 2.387 0 00.006-2.952l2.621-3.134a1 1 0 10-1.512-1.296l-2.62 3.134a2.387 2.387 0 00-1.755-1.028" />
              <circle cx="12" cy="16" r="4" stroke-width="2" />
            </svg>
            <span class="font-semibold text-lg">My Digital ID</span>
          </div>
          <p class="text-gray-400 text-sm mb-4">Your secure tourist identification</p>

          <!-- ID Card -->
          <div
            class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-5 flex justify-between items-center text-white">
            <div>
              <h3 class="font-bold text-xl mb-1">John Doe</h3>
              <p class="text-sm">Tourist ID</p>
              <p class="text-lg font-mono tracking-wide mt-1">TS-A7X9K2M4P</p>
              <p class="flex items-center mt-3 text-sm text-blue-200">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round"
                    d="M17.657 16.657L13.414 12.414a2 2 0 10-2.828-2.828l-4.243 4.243a6 6 0 108.485 8.485z" />
                  <circle cx="12" cy="12" r="3" />
                </svg>
                Paris, France
              </p>
            </div>
            <div class="bg-white bg-opacity-80 p-2 rounded-md">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-14 w-14 text-blue-600" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" stroke-width="2">
                <!-- QR code icon simplified -->
                <rect x="3" y="3" width="4" height="4" stroke="currentColor" stroke-width="2" />
                <rect x="8" y="3" width="2" height="2" stroke="currentColor" stroke-width="2" />
                <rect x="11" y="3" width="2" height="2" stroke="currentColor" stroke-width="2" />
                <rect x="3" y="8" width="2" height="2" stroke="currentColor" stroke-width="2" />
                <rect x="6" y="8" width="2" height="2" stroke="currentColor" stroke-width="2" />
                <rect x="9" y="8" width="2" height="2" stroke="currentColor" stroke-width="2" />
              </svg>
            </div>
          </div>
        </div>

        <!-- Filter Bar -->
        <div class="flex flex-wrap items-center justify-between mb-6">
          <div class="flex space-x-2 mb-4">
            <button class="px-4 py-2 bg-blue-500 text-white rounded-lg">All Trips</button>
            <button class="px-4 py-2 bg-white text-gray-700 rounded-lg border">Upcoming</button>
            <button class="px-4 py-2 bg-white text-gray-700 rounded-lg border">Ongoing</button>
            <button class="px-4 py-2 bg-white text-gray-700 rounded-lg border">Completed</button>
          </div>
          <div class="flex space-x-2 mb-4">
            <button class="px-4 py-2 bg-white text-gray-700 rounded-lg border flex items-center">
              <i class="fas fa-sort mr-2"></i> Sort By
            </button>
            <button onclick="document.getElementById('journeyForm').style.display='block'"
              class="px-4 py-2 bg-blue-500 text-white rounded-lg flex items-center">
              <i class="fas fa-plus mr-2"></i> New Trip
            </button>
          </div>
        </div>

        <!-- Trip Logs Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Trip Card 1 -->
          <%Trips.forEach((trip)=>{%>
            <div data-trip-id="<%= trip._id %>"
              class="trip-card bg-white rounded-xl overflow-hidden border border-gray-200">
              <div class="relative">
                <img
                  src="https://images.unsplash.com/photo-1506744038136-46273834b3fb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&q=80"
                  alt="Rocky Mountains" class="w-full h-48 object-cover">
                <div class="absolute top-4 right-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                  Upcoming
                </div>
              </div>
              <div class="p-5">
                <div class="flex justify-between items-start">
                  <h3 class="text-xl font-bold text-gray-800">
                    <%=trip.endLocation%>
                  </h3>
                  <i class="fas fa-ellipsis-v text-gray-400"></i>
                </div>
                <p class="text-gray-600 mt-2">5-day hiking expedition through the Canadian Rockies</p>

                <div class="flex items-center mt-4 text-gray-500">
                  <i class="fas fa-calendar-alt mr-2"></i>
                  <span>
                    <%=trip.travelDate.toString().slice(4, 15)%> - <%=trip.endDate%>
                  </span>
                </div>

                <div class="flex items-center mt-2 text-gray-500">
                  <i class="fas fa-map-marker-alt mr-2"></i>
                  <span>
                    <%=trip.startLocation%> - <%=trip.endLocation%>
                  </span>
                </div>

                <div class="mt-6 flex justify-between">
                  <% if(trip.status==="scheduled" ){ %>
                    <button
                      class="start-trip-btn px-4 py-2 bg-green-500 text-white rounded-lg flex items-center animate-pulse"
                      data-trip-id="<%= trip._id %>">
                      <i class="fas fa-play mr-2"></i> Start Trip
                    </button>
                    <% } else if(trip.status==="in-progress" ){ %>
                      <button onclick="endTrip('<%= trip._id %>')"
                        class="end-trip-btn px-4 py-2 bg-blue-500 text-white rounded-lg flex items-center "
                        data-trip-id="<%= trip._id %>">
                        <i class="fas fa-pause mr-2"></i> End Trip
                      </button>
                      <% } else { %>
                        <button class=" disabled py-2 px-4 bg-gray-400 text-white rounded-lg flex items-center"
                          disabled>
                          <i class="fas fa-check mr-2"></i> Trip Completed
                        </button>
                        <% } %>

                          <button class="details-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-lg flex items-center">
                            <i class="fas fa-info-circle mr-2"></i> Details
                          </button>

                </div>

              </div>
            </div>
            <%})%>
        </div>
      </div>



      <!-- Right Column -->
      <div class="md:col-span-4 space-y-6">
        <!-- Emergency Help -->
        <div class="border border-gray-200 rounded-lg p-5" onclick="emergencyService()">
          <div class="flex items-center text-red-600 font-semibold mb-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" fill="none" viewBox="0 0 24 24"
              stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round"
                d="M10.29 3.86L1.82 18a1.015 1.015 0 00.87 1.5h18.6a1.015 1.015 0 00.87-1.5L13.71 3.86a1 1 0 00-1.42 0zM12 9v4m0 4h.01" />
            </svg>
            Emergency Help
          </div>
          <p class="text-gray-400 text-sm mb-4">Instant emergency assistance</p>
          <button
            class="w-full bg-red-500 hover:bg-red-600 rounded-md py-3 font-semibold text-white flex items-center justify-center gap-2 transition">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="2"
              viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round"
                d="M18.364 17.364A9 9 0 105.636 6.636a9 9 0 0012.728 10.728z" />
              <path stroke-linecap="round" stroke-linejoin="round" d="M15 9l-6 6M9 9l6 6" />
            </svg>
            SOS EMERGENCY
          </button>
          <p class="mt-3 text-center text-gray-400 text-xs">
            Press only in real emergencies
          </p>
          <p class="mt-2 text-center text-gray-500 text-sm flex justify-center items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="inline w-4 h-4 text-gray-400" fill="none" viewBox="0 0 24 24"
              stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round"
                d="M3 10h11M9 21V3m7 17a3 3 0 010-6m0 0a3 3 0 110 6z" />
            </svg>
            +33 123 456 789
          </p>
        </div>

        <!-- Safety Alerts -->
        <div class="border border-gray-200 rounded-lg p-5">
          <div class="flex items-center font-semibold text-yellow-600 mb-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" fill="none" viewBox="0 0 24 24"
              stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round"
                d="M12 9v2m0 4h.01M10.29 3.86l-7.32 12.48A1 1 0 003.87 18h16.26a1 1 0 00.87-1.5l-7.32-12.48a1 1 0 00-1.42 0z" />
            </svg>
            Safety Alerts
          </div>
          <p class="text-gray-400 text-sm mb-4">Latest safety information</p>

          <div class="space-y-3">
            <!-- Alert 1 -->
            <div class="border border-gray-200 rounded-md p-3">
              <p class="text-blue-600 text-sm font-semibold">Weather alert: Light rain expected in your area</p>
              <p class="text-gray-400 text-xs mt-0.5">2 hours ago</p>
            </div>

            <!-- Alert 2 -->
            <div class="border border-gray-200 rounded-md p-3">
              <p class="text-yellow-600 text-sm font-semibold">Traffic disruption on Route A1 - use alternate routes
              </p>
              <p class="text-gray-400 text-xs mt-0.5">4 hours ago</p>
            </div>

            <!-- Alert 3 -->
            <div class="border border-gray-200 rounded-md p-3">
              <p class="text-green-600 text-sm font-semibold">Your location is in a safe tourist zone</p>
              <p class="text-gray-400 text-xs mt-0.5">1 day ago</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <!-- views/journeyForm.ejs -->
  <div class="modal" id="journeyForm" style="display:none; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
      <div class="modal-content rounded shadow">
        <!-- Modal Header -->
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title"><i class="fas fa-route me-2"></i>Plan Your Journey</h5>
          <button type="button" class="btn-close btn-close-white" aria-label="Close" onclick="closeForm()"></button>
        </div>

        <!-- Modal Body -->
        <div class="modal-body">
          <form action="/journey/submit" method="POST" id="journeyDetailsForm">
            <!-- Route Visualization -->
            <div class="route-visualization mb-4 p-3 bg-light rounded text-center">
              <div class="d-flex justify-content-between align-items-center">
                <div class="location-point">
                  <span class="circle bg-primary"></span>
                  <p class="mt-2 mb-0 small" id="startLabel">Start</p>
                </div>
                <div class="route-line flex-grow-1 mx-2">
                  <div class="dashed-line"></div>
                  <i class="fas fa-arrow-right text-muted"></i>
                </div>
                <div class="location-point">
                  <span class="circle bg-success"></span>
                  <p class="mt-2 mb-0 small" id="destinationLabel">Destination</p>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="startLocation" class="form-label">
                    <i class="fas fa-map-marker-alt text-primary me-1"></i>Start Location
                  </label>
                  <input type="text" class="form-control" id="startLocation" name="startLocation"
                    placeholder="Enter starting point" required oninput="updateLocationLabel('startLabel', this.value)">
                  <div class="form-text">Start typing for suggestions</div>
                  <div id="startSuggestions" class="list-group position-absolute w-100 d-none"></div>
                </div>
              </div>

              <div class="col-md-6">
                <div class="mb-3">
                  <label for="destination" class="form-label">
                    <i class="fas fa-flag text-success me-1"></i>Destination
                  </label>
                  <input type="text" class="form-control" id="destination" name="destination"
                    placeholder="Enter destination" required
                    oninput="updateLocationLabel('destinationLabel', this.value)">
                  <div class="form-text">Start typing for suggestions</div>
                  <div id="destinationSuggestions" class="list-group position-absolute w-100 d-none"></div>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="date" class="form-label">
                    <i class="far fa-calendar-alt me-1"></i>Journey Date
                  </label>
                  <input type="date" class="form-control" id="date" name="date" required
                    min="<?= new Date().toISOString().split('T')[0] ?>">
                  <div class="form-text" id="dateInfo"></div>
                </div>
              </div>

              <div class="col-md-6">
                <div class="mb-3">
                  <label for="enddate" class="form-label">
                    <i class="far fa-calendar-alt me-1"></i>Journey End Date
                  </label>
                  <input type="date" class="form-control" id="enddate" name="enddate" required>
                  <div class="form-text" id="enddateInfo"></div>
                </div>
              </div>
            </div>

            <div class="mb-3">
              <label for="passengers" class="form-label">
                <i class="fas fa-users me-1"></i>Passengers
              </label>
              <div class="d-flex align-items-center">
                <button type="button" class="btn btn-outline-secondary" onclick="adjustPassengers(-1)">
                  <i class="fas fa-minus"></i>
                </button>
                <input type="number" class="form-control mx-2 text-center" id="passengers" name="passengers" min="1"
                  value="1" readonly>
                <button type="button" class="btn btn-outline-secondary" onclick="adjustPassengers(1)">
                  <i class="fas fa-plus"></i>
                </button>
              </div>
            </div>


            <div class="form-check mb-3">
              <input class="form-check-input" type="checkbox" id="rememberDetails" name="rememberDetails">
              <label class="form-check-label" for="rememberDetails">
                Remember my details for future journeys
              </label>
            </div>

            <button type="submit" class="btn btn-primary w-100 py-2">
              <i class="fas fa-paper-plane me-2"></i>Plan Journey
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>

    // Initialize the form with current date and time
    document.addEventListener('DOMContentLoaded', function () {
      const now = new Date();

      // Set default date to today
      const today = now.toISOString().split('T')[0];
      document.getElementById('date').value = today;
      updateDateInfo(today);
      // Add event listeners
      document.getElementById('date').addEventListener('change', function () {
        updateDateInfo(this.value);
      });
      // document.getElementById('notes').addEventListener('input', function () {
      //   const count = this.value.length;
      //   document.getElementById('noteCount').textContent = count;

      //   if (count > 200) {
      //     this.classList.add('is-invalid');
      //   } else {
      //     this.classList.remove('is-invalid');
      //   }
      // });

      // Setup location autocomplete
      // setupAutocomplete('startLocation', 'startSuggestions');
      // setupAutocomplete('destination', 'destinationSuggestions');
    });

    function updateDateInfo(dateString) {
      const date = new Date(dateString);
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      const formattedDate = date.toLocaleDateString('en-US', options);

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedDate = new Date(dateString);

      let infoText = formattedDate;

      if (selectedDate.getTime() === today.getTime()) {
        infoText += " (Today)";
      } else if (selectedDate.getTime() === today.getTime() + 86400000) {
        infoText += " (Tomorrow)";
      } else {
        const diffTime = selectedDate.getTime() - today.getTime();
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        infoText += ` (in ${diffDays} days)`;
      }

      document.getElementById('dateInfo').textContent = infoText;
    }


    function adjustPassengers(change) {
      const passengersInput = document.getElementById('passengers');
      let currentValue = parseInt(passengersInput.value);
      let newValue = currentValue + change;

      if (newValue < 1) newValue = 1;

      passengersInput.value = newValue;
    }

    function updateLocationLabel(elementId, value) {
      const label = document.getElementById(elementId);
      label.textContent = value || (elementId === 'startLabel' ? 'Start' : 'Destination');
    }

    // function setupAutocomplete(inputId, suggestionsId) {
    //   const input = document.getElementById(inputId);
    //   const suggestionsContainer = document.getElementById(suggestionsId);

    //   input.addEventListener('focus', function () {
    //     if (this.value.length > 1) {
    //       showSuggestions(this.value, suggestionsContainer, input);
    //     }
    //   });

    //   input.addEventListener('input', function () {
    //     showSuggestions(this.value, suggestionsContainer, input);
    //   });

    //   // Hide suggestions when clicking outside
    //   document.addEventListener('click', function (e) {
    //     if (e.target !== input && !suggestionsContainer.contains(e.target)) {
    //       suggestionsContainer.classList.add('d-none');
    //     }
    //   });
    // }

    // function showSuggestions(query, container, input) {
    //   if (query.length < 2) {
    //     container.classList.add('d-none');
    //     return;
    //   }

    //   const filtered = locationSuggestions.filter(location =>
    //     location.toLowerCase().includes(query.toLowerCase())
    //   );

    //   if (filtered.length === 0) {
    //     container.classList.add('d-none');
    //     return;
    //   }

    //   container.innerHTML = '';
    //   filtered.forEach(location => {
    //     const item = document.createElement('button');
    //     item.type = 'button';
    //     item.classList.add('list-group-item', 'list-group-item-action');
    //     item.textContent = location;
    //     item.addEventListener('click', function () {
    //       input.value = location;
    //       updateLocationLabel(input.id === 'startLocation' ? 'startLabel' : 'destinationLabel', location);
    //       container.classList.add('d-none');
    //     });
    //     container.appendChild(item);
    //   });

    //   // Position the suggestions container below the input
    //   const rect = input.getBoundingClientRect();
    //   container.style.top = `${rect.bottom + window.scrollY}px`;
    //   container.style.left = `${rect.left + window.scrollX}px`;
    //   container.style.width = `${rect.width}px`;
    //   container.classList.remove('d-none');
    // }

    function closeForm() {
      document.getElementById('journeyForm').style.display = 'none';
    }
    async function emergencyService() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(async (pos) => {
          const payload = {
            touristId: "<%= user._id %>", // dynamic from server
            lat: pos.coords.latitude,
            lng: pos.coords.longitude,
          };
          console.log("SOS Payload:", payload);
          await fetch('/emergencySos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ payload })
          })
            .then(response => response.json())
            .then(data => {
              alert('Emergency services have been notified. Help is on the way!');
            })
            .catch(error => {
              console.error('Error:', error);
              alert('Failed to notify emergency services. Please try again.');
            });
          alert("🚨 SOS sent to authorities!");
        }, () => {
          alert("❌ Failed to get location!");
        });
      }
      else {
        alert("❌ Geolocation is not supported by this browser.");
      }
    }
    const startButtons = document.querySelectorAll('.start-trip-btn');

    startButtons.forEach(button => {
      button.addEventListener('click', function handleStart() {
        const card = this.closest('.trip-card');
        const statusBadge = card.querySelector('.bg-blue-500');

        if (statusBadge) {
          // update badge
          statusBadge.textContent = 'Ongoing';
          statusBadge.classList.remove('bg-blue-500');
          statusBadge.classList.add('bg-yellow-500');

          // update button
          this.innerHTML = `<i class="fas fa-pause mr-2"></i> End Trip`;
          this.classList.remove('bg-green-500', 'animate-pulse');
          this.classList.add('bg-blue-500');

          // remove start handler and add end handler
          this.removeEventListener('click', handleStart);
          this.addEventListener('click', () => endTrip(card.dataset.tripId));

          // backend call
          fetch('/startTrip', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tripId: card.dataset.tripId })
          })
            .then(response => response.json())
            .then(data => console.log('Trip started:', data))
            .catch(err => console.error('Error starting trip:', err));
        }
      });
    });

    function endTrip(tripId) {
      const card = document.querySelector(`.trip-card[data-trip-id='${tripId}']`);
      const statusBadge = card.querySelector('.bg-yellow-500');
      console.log("called");

      if (statusBadge) {
        // update badge
        statusBadge.textContent = 'Completed';
        statusBadge.classList.remove('bg-yellow-500');
        statusBadge.classList.add('bg-green-500');

        // update button
        const btn = card.querySelector('.end-trip-btn');
        btn.innerHTML = `<i class="fas fa-check mr-2"></i> Trip Completed`;
        btn.classList.remove('bg-blue-500');
        btn.classList.add('bg-gray-400');
        btn.disabled = true;

        // backend call
        fetch('/endTrip', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tripId })
        })
          .then(r => r.json())
          .then(data => console.log('Trip ended:', data))
          .catch(err => console.error('Error ending trip:', err));
      }
    }
    function sos() {

    }

    let socket = io();
    socket.on("alert", ({ message }) => {
      alert(`Safety Alert: ${message}`);
    });
  </script>



</body>

</html>